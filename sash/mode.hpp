/******************************************************************************
 *                   ____     ______   ____     __  __                        *
 *                  /\  _`\  /\  _  \ /\  _`\  /\ \/\ \                       *
 *                  \ \,\L\_\\ \ \L\ \\ \,\L\_\\ \ \_\ \                      *
 *                   \/_\__ \ \ \  __ \\/_\__ \ \ \  _  \                     *
 *                     /\ \L\ \\ \ \/\ \ /\ \L\ \\ \ \ \ \                    *
 *                     \ `\____\\ \_\ \_\\ `\____\\ \_\ \_\                   *
 *                      \/_____/ \/_/\/_/ \/_____/ \/_/\/_/                   *
 *                                                                            *
 *                                                                            *
 * Copyright (c) 2014                                                         *
 * Matthias Vallentin <vallentin (at) icir.org>                               *
 * Dominik Charousset <dominik.charousset (at) haw-hamburg.de>                *
 *                                                                            *
 * Distributed under the Boost Software License, Version 1.0. See             *
 * accompanying file LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt  *
\******************************************************************************/

#ifndef SASH_MODE_HPP
#define SASH_MODE_HPP

#include <memory>
#include <string>

namespace sash {

  /// A command-line context with its own commands, history, and prompt.
class mode
{

  mode(mode const&) = delete;
  mode& operator=(mode const&) = delete;

public:
  /// Constructs a mode.
  /// @param name The name of the mode.
  /// @param prompt The prompt string.
  /// @param prompt_color The color of *prompt*.
  /// @param history_file The file where to store the mode history.
  mode(std::string name, std::string prompt,
       char const* prompt_color, std::string history_file);

  /// Adds a sub-command to this command.
  /// @param name The name of the command.
  /// @param desc A one-line description of the command.
  /// @returns If successful, a valid pointer to the newly created command.
  std::shared_ptr<command> add(std::string name, std::string desc);

  /// Assigns a callback handler for unknown commands.
  /// @param f The function to execute for unknown commands.
  void on_unknown_command(callback f);

  /// Assigns a callback handler for unknown commands.
  /// @param f The function to execute for unknown commands.
  void on_complete(editline::completer::callback f);

  /// Registers a completion with this mode.
  /// @param The string to register.
  void complete(std::string str);

  /// Replaces the completions associated with a set of new ones.
  /// @param completiosn The new completions.
  void complete(std::vector<std::string> completions);

  /// Execute a command line.
  result<bool> execute(std::string args) const;

  /// Retrieves the name of this mode.
  /// @returns The name of this mode
  std::string const& name() const;

  /// Retrieves the autogenerated help string for this mode.
  /// @param indent The number of spaces to indent the help text.
  /// @returns The help string for this mode.
  std::string help(size_t indent = 0) const;

private:
  std::shared_ptr<command> root_;
  editline::history history_;
  editline el_;
};

} // namespace sash

#endif // SASH_MODE_HPP
